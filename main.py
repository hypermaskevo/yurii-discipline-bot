 # yurii_discipline_bot_v3.6.py
import json
import os
import datetime
import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters, CallbackQueryHandler
)
from dotenv import load_dotenv

# Load .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
USER_ID = int(os.getenv("USER_ID"))

# Load plan
with open("yurii_discipline_plan_30days_v36.json", "r", encoding="utf-8") as f:
    full_plan = json.load(f)

# State
user_state = {
    "day": 1,
    "hellmode": False,
    "confirmed": False,
    "strike": 0,
    "streak": 0,
    "task_timer": {},
    "weekly_goal": ""
}

JOURNAL_FILE = "journal.json"
if os.path.exists(JOURNAL_FILE):
    with open(JOURNAL_FILE, "r", encoding="utf-8") as f:
        journal_data = json.load(f)
else:
    journal_data = {}

# Quotes
MOTIVATION_QUOTES = [
    "üî• –Ø–∫—â–æ –Ω–µ —Ç–∏ ‚Äî —Ç–æ —Ö—Ç–æ?",
    "üíÄ –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ –∞–±–æ —Å–º–µ—Ä—Ç—å —Ç–≤–æ—ó–º –º—Ä—ñ—è–º.",
    "üß† –ü–µ—Ä–µ–º–∞–≥–∞—î –Ω–µ —Å–∏–ª—å–Ω–∏–π, –∞ –≤–ø–µ—Ä—Ç–∏–π.",
    "üéØ –°–ª–∞–±–∫—ñ—Å—Ç—å –Ω–µ –¥–∞—Å—Ç—å —Ç–æ–±—ñ –º—ñ–ª—å–π–æ–Ω.",
    "üî™ –î—ñ–π —â–æ–¥–Ω—è ‚Äî –∞–±–æ –∑–Ω–æ–≤—É –±—É–¥–µ—à –±–µ–∑ –≥—Ä–æ—à–µ–π."
]

ACHIEVEMENTS = []

# Save journal
def save_journal():
    with open(JOURNAL_FILE, "w", encoding="utf-8") as f:
        json.dump(journal_data, f, indent=2, ensure_ascii=False)

# START
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    keyboard = [[InlineKeyboardButton("üìÖ –ü–ª–∞–Ω", callback_data="show_plan")]]
    await update.message.reply_text("üî• Yurii Discipline Bot V3.6 –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ –∞–±–æ /help", reply_markup=InlineKeyboardMarkup(keyboard))

# HELP
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üëã *–í—ñ—Ç–∞—é –≤ Yuri Discipline Bot V3.6*\n\n"
        "üî• *–ì–æ–ª–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n"
        "/start ‚Äì –ü–æ—á–∞—Ç–∏ / –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–µ–Ω—å\n"
        "/status ‚Äì –°—Ç–∞—Ç—É—Å –¥–Ω—è: Strikes, Hellmode, –ó–≤—ñ—Ç\n"
        "/done ‚Äì –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –¥–µ–Ω—å\n"
        "/plan 1 ‚Äì –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å (1-30)\n\n"
        "üéØ *–¶—ñ–ª—ñ:*\n"
        "/goal ‚Äì –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–ª—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n"
        "/hellmode ‚Äì –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ Hellmode: –∑–±—ñ–ª—å—à–µ–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å\n\n"
        "üìí *–ñ—É—Ä–Ω–∞–ª:*\n"
        "/journal ‚Äì –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –¥–Ω—ñ\n\n"
        "üß± *–°–∏—Å—Ç–µ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n"
        "/begin ‚Äì –ó–∞–ø–∏—Å–∞—Ç–∏ –ø–æ—á–∞—Ç–æ–∫ –∑–∞–≤–¥–∞–Ω–Ω—è (/begin gym)\n"
        "/end ‚Äì –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —ñ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —á–∞—Å (/end gym)\n"
        "/reset ‚Äì –°–∫–∏–Ω—É—Ç–∏ –≤—Å–µ –¥–æ –î–Ω—è 1 (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)\n\n"
        "‚ùó *–í–∞–∂–ª–∏–≤–æ:*\n"
        "‚Äì –Ø–∫—â–æ –Ω–µ –Ω–∞–¥—ñ—à–ª–µ—à /done –¥–æ –≤–µ—á–æ—Ä–∞ ‚Äî –±—É–¥–µ STRIKE ‚ùå\n"
        "‚Äì –Ø–∫—â–æ 3 STRIKE –ø—ñ–¥—Ä—è–¥ ‚Äî –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –Ω–∞ 1 –¥–µ–Ω—å\n"
        "‚Äì –ë–æ—Ç –Ω–∞–≥–∞–¥—É—î —Ü—ñ–ª—å —â–æ–¥–Ω—è –æ–± 12:00\n"
        "‚Äì Hellmode –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –ø—ñ—Å–ª—è 5 –¥–Ω—ñ–≤\n"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

# HELL
async def hellmode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state["hellmode"] = True
    await update.message.reply_text("üí• Hellmode –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ –∂–æ—Ä—Å—Ç–∫–æ!")

# STATUS
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today().isoformat()
    result = journal_data.get(today, "‚ùì –ù–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–≤—ñ—Ç")
    await update.message.reply_text(
        f"üìÖ –î–µ–Ω—å: {user_state['day']}, Strike: {user_state['strike']}/3\n"
        f"üî• Hellmode: {'ON' if user_state['hellmode'] else 'OFF'}\n"
        f"‚úÖ –°—Ç—Ä—ñ–∫: {user_state['streak']}\nüìò –ó–≤—ñ—Ç: {result}"
    )

# JOURNAL
async def journal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    output = "\n".join(f"{date}: {entry}" for date, entry in sorted(journal_data.items())) or "–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤."
    await update.message.reply_text(f"üìä –ñ—É—Ä–Ω–∞–ª:\n{output}")

# GOAL
async def goal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state['weekly_goal'] = "–ü–æ–¥–∞—Ç–∏ 50 –∑–∞—è–≤–æ–∫"
    await update.message.reply_text("üéØ –¶—ñ–ª—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ü–æ–¥–∞—Ç–∏ 50 –∑–∞—è–≤–æ–∫")

# BUTTON
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "show_plan":
        tasks = full_plan.get(str(user_state["day"]), [])
        msg = f"üìÖ –î–µ–Ω—å {user_state['day']}:\n" + "\n".join(f"üîπ {task}" for task in tasks)
        await query.edit_message_text(msg)
    elif query.data == "journal_done":
        today = datetime.date.today().isoformat()
        journal_data[today] = "done"
        user_state['streak'] += 1
        user_state['strike'] = 0
        save_journal()
        if user_state['streak'] == 7:
            await query.edit_message_text("üèÖ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è: 7 –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å!")
        else:
            await query.edit_message_text(f"‚úÖ –ó–≤—ñ—Ç –ø—Ä–∏–π–Ω—è—Ç–æ. –°—Ç—Ä—ñ–∫: {user_state['streak']}")
    elif query.data == "journal_fail":
        today = datetime.date.today().isoformat()
        journal_data[today] = "fail"
        user_state['strike'] += 1
        user_state['streak'] = 0
        save_journal()
        msg = f"‚ùå –ü—Ä–æ–≥—Ä–∞–≤ –¥–µ–Ω—å. STRIKE {user_state['strike']}/3\n"
        if user_state['strike'] >= 3:
            msg += "üî¥ –¢—Ä–∏ –ø—Ä–æ–≤–∞–ª–∏ –ø–æ—Å–ø—ñ–ª—å. –¢–∏ –≤—Ç—Ä–∞—á–∞—î—à $100."
        await query.edit_message_text(msg)

# TASK
async def send_daily_task(context: ContextTypes.DEFAULT_TYPE):
    hour = datetime.datetime.now().hour
    if hour > 10 and not user_state['confirmed']:
        await context.bot.send_message(USER_ID, "üîí –î–µ–Ω—å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ. –¢—ñ–ª—å–∫–∏ –∑–∞–≤—Ç—Ä–∞.")
        return
    user_state['confirmed'] = False
    tasks = full_plan.get(str(user_state['day']), [])
    if user_state['hellmode'] or user_state['day'] > 5:
        tasks += ["üî• +1 TikTok", "‚öôÔ∏è 2x IT-—Å–µ—Å—ñ—ó"]
    msg = f"üåÖ –î–µ–Ω—å {user_state['day']}:\n" + "\n".join(f"‚úÖ {t}" for t in tasks)
    await context.bot.send_message(USER_ID, msg)

# REMINDER
async def reminder(context: ContextTypes.DEFAULT_TYPE):
    if not user_state['confirmed']:
        await context.bot.send_message(USER_ID, "üß† –¢–≤–æ—î –º–∞–π–±—É—Ç–Ω—î —á–µ–∫–∞—î. –ê —Ç–∏ —á–µ–∫–∞—î—à —â–æ?")

# AFTERNOON
async def afternoon_check(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(USER_ID, "‚è≥ –©–æ —Ç–∏ –≤–∂–µ –∑—Ä–æ–±–∏–≤? –ü—Ä–æ–≥—Ä–µ—Å —î?")

# JOURNAL ASK
async def ask_journal(context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–≤", callback_data="journal_done")],
        [InlineKeyboardButton("‚ùå –ù–µ –≤–∏–∫–æ–Ω–∞–≤", callback_data="journal_fail")]
    ]
    await context.bot.send_message(USER_ID, "üìò –ó–≤—ñ—Ç –∑–∞ –¥–µ–Ω—å?", reply_markup=InlineKeyboardMarkup(keyboard))

# /done ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
async def done_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state['confirmed'] = True
    await update.message.reply_text("üü¢ –ü–æ—á–∞–≤ –¥–µ–Ω—å! –ù–µ –∑—É–ø–∏–Ω—è–π—Å—è.")

# /begin ‚Äî –ø–æ—á–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
async def begin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = " ".join(context.args) or "No description"
    start_time = datetime.datetime.now().isoformat()
    user_state['task_timer'][task] = start_time
    await update.message.reply_text(f"‚ñ∂Ô∏è –ü–æ—á–∞–≤: {task}")

# /end ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
async def end_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = " ".join(context.args) or "No description"
    start_time = user_state['task_timer'].get(task)
    if not start_time:
        await update.message.reply_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—Ç –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return
    duration = datetime.datetime.now() - datetime.datetime.fromisoformat(start_time)
    await update.message.reply_text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task} ‚Äî {duration}")
    del user_state['task_timer'][task]

# SUMMARY
async def weekly_summary(context: ContextTypes.DEFAULT_TYPE):
    last_7 = list(journal_data.values())[-7:]
    done_days = last_7.count("done")
    await context.bot.send_message(USER_ID, f"üìà –¢–∏–∂–¥–µ–Ω—å: {done_days}/7 –≤–∏–∫–æ–Ω–∞–Ω–æ")

# BOT RUN
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("journal", journal_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("hellmode", hellmode_command))
    app.add_handler(CommandHandler("goal", goal_command))
    app.add_handler(CommandHandler("done", done_command))
    app.add_handler(CommandHandler("begin", begin_command))
    app.add_handler(CommandHandler("end", end_command))
    app.add_handler(CallbackQueryHandler(button))

    tz = datetime.timezone(datetime.timedelta(hours=2))
    job_queue = app.job_queue
    job_queue.run_daily(send_daily_task, time=datetime.time(hour=8, tzinfo=tz))
    job_queue.run_daily(reminder, time=datetime.time(hour=12, tzinfo=tz))
    job_queue.run_daily(afternoon_check, time=datetime.time(hour=17, tzinfo=tz))
    job_queue.run_daily(ask_journal, time=datetime.time(hour=20, tzinfo=tz))
    job_queue.run_daily(weekly_summary, time=datetime.time(hour=21, tzinfo=tz), days=(6,))

    print("‚úÖ Yurii Discipline Bot V3.6 Active")
    app.run_polling() 
