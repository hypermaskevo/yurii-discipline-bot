import json
import os
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    CommandHandler, MessageHandler, filters, JobQueue, CallbackQueryHandler
)
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
USER_ID = int(os.getenv("USER_ID"))

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É ---
with open("yurii_discipline_plan_30days.json", "r", encoding="utf-8") as f:
    full_plan = json.load(f)

# --- –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
user_state = {
    "day": 1,
    "confirmed": False
}

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
LOG_FILE = "yurii_progress_log.json"

if os.path.exists(LOG_FILE):
    with open(LOG_FILE, "r", encoding="utf-8") as f:
        progress_log = json.load(f)
else:
    progress_log = []

# --- –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞ –¥–ª—è –ù—ñ–º–µ—á—á–∏–Ω–∏ ---
TZ = datetime.timezone(datetime.timedelta(hours=2))

# --- –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è ---
async def send_daily_task(context: ContextTypes.DEFAULT_TYPE):
    day = user_state["day"]
    if str(day) not in full_plan:
        await context.bot.send_message(chat_id=USER_ID, text="‚úÖ –ü–ª–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return

    task = full_plan[str(day)]
    message = f"\U0001F680 –î–µ–Ω—å {day}:\n\n"
    for block, item in task.items():
        message += f"\u2728 *{block}*: {item}\n"
    message += "\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, –∫–æ–ª–∏ –≤–∏–∫–æ–Ω–∞—î—à –∑–∞–≤–¥–∞–Ω–Ω—è."

    keyboard = [[InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data="confirm_done")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=USER_ID, text=message, parse_mode="Markdown", reply_markup=reply_markup)
    user_state["confirmed"] = False

# --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–∫–Ω–æ–ø–∫–∞ –∞–±–æ –∫–æ–º–∞–Ω–¥–∞) ---
async def confirm_done_action(context):
    user_state["confirmed"] = True
    user_state["day"] += 1

    log_entry = {
        "date": datetime.datetime.now(tz=TZ).strftime("%Y-%m-%d %H:%M"),
        "day": user_state["day"] - 1,
        "status": "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ"
    }
    progress_log.append(log_entry)

    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(progress_log, f, indent=2, ensure_ascii=False)

# --- –ö–æ–º–∞–Ω–¥–∞ /done ---
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if user_state["confirmed"]:
        await update.message.reply_text("–í–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ")
    else:
        await confirm_done_action(context)
        await update.message.reply_text("–î–æ–±—Ä–µ, —Ä—É—Ö–∞—î–º–æ—Å—å –¥–∞–ª—ñ! \U0001F4AA")

# --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "confirm_done":
        if user_state["confirmed"]:
            await query.edit_message_text("–í–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ")
        else:
            await confirm_done_action(context)
            await query.edit_message_text("–î–æ–±—Ä–µ, —Ä—É—Ö–∞—î–º–æ—Å—å –¥–∞–ª—ñ! \U0001F4AA")

# --- –®—Ç—Ä–∞—Ñ–∏, —è–∫—â–æ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ---
async def penalty_reminder(context: ContextTypes.DEFAULT_TYPE):
    if not user_state["confirmed"]:
        await context.bot.send_message(
            chat_id=USER_ID,
            text="\u274C –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ. –£—è–≤–∏: –¥–µ–Ω—å –±–µ–∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É, –≥—Ä–æ—à–µ–π —á–∏ —ó–∂—ñ. –ù–µ –¥–æ–ø—É—Å–∫–∞–π —Ü—å–æ–≥–æ –∑–∞–≤—Ç—Ä–∞."
        )
        log_entry = {
            "date": datetime.datetime.now(tz=TZ).strftime("%Y-%m-%d %H:%M"),
            "day": user_state["day"],
            "status": "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ"
        }
        progress_log.append(log_entry)
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(progress_log, f, indent=2, ensure_ascii=False)

# --- –©–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç ---
async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now(tz=TZ)
    week_ago = now - datetime.timedelta(days=7)
    recent = [entry for entry in progress_log if datetime.datetime.strptime(entry["date"], "%Y-%m-%d %H:%M") >= week_ago]
    if not recent:
        msg = "–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å –Ω–µ –±—É–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ."
    else:
        msg = "üìä –ó–≤—ñ—Ç –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:\n"
        for e in recent:
            msg += f"{e['date']}: –î–µ–Ω—å {e['day']} ‚Äî {e['status']}\n"
    await context.bot.send_message(chat_id=USER_ID, text=msg)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–≤—Ç—Ä–∞ –æ 08:00 –æ—Ç—Ä–∏–º–∞—î—à –∑–∞–≤–¥–∞–Ω–Ω—è.")

# --- –ö–æ–º–∞–Ω–¥–∞ /status ---
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    day = user_state["day"]
    confirmed = user_state["confirmed"]
    msg = f"\U0001F4CA –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å: {day}\n"
    msg += "\u2705 –í–∏–∫–æ–Ω–∞–Ω–æ" if confirmed else "\u274C –ù–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"
    await update.message.reply_text(msg)

# --- –ö–æ–º–∞–Ω–¥–∞ /reset ---
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state["day"] = 1
    user_state["confirmed"] = False
    await update.message.reply_text("‚èÆ –ü–æ—á–∏–Ω–∞—î–º–æ –∑–Ω–æ–≤—É –∑ –î–Ω—è 1")

# --- –ö–æ–º–∞–Ω–¥–∞ /help ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "\U0001F4D6 *Yurii Discipline Bot ‚Äì –î–æ–ø–æ–º–æ–≥–∞*\n\n"
        "/start ‚Äì –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞\n"
        "/done ‚Äì –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è\n"
        "/status ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —Ç–∞ —Å—Ç–∞—Ç—É—Å\n"
        "/reset ‚Äì –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É –∑ –¥–Ω—è 1\n"
        "/plan [–Ω–æ–º–µ—Ä] ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –¥–µ–Ω—å (–∞–±–æ —Å—å–æ–≥–æ–¥–Ω—ñ)\n"
        "/help ‚Äì —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
        "–©–æ—Ä–∞–Ω–∫—É –æ 08:00 —Ç–∏ –æ—Ç—Ä–∏–º—É—î—à –∑–∞–≤–¥–∞–Ω–Ω—è. –Ø–∫—â–æ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—à ‚Äì –≤–≤–µ—á–µ—Ä—ñ –±—É–¥–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è-—à–∞—Ä–ª–∞—Ç–∞–Ω!"
    )
    await update.message.reply_text(msg, parse_mode="Markdown")

# --- –ö–æ–º–∞–Ω–¥–∞ /plan ---
async def plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if args and args[0].isdigit():
        day = int(args[0])
    else:
        day = user_state["day"]

    if str(day) not in full_plan:
        await update.message.reply_text("–ü–ª–∞–Ω –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    task = full_plan[str(day)]
    message = f"\U0001F4DD –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å {day}:\n\n"
    for block, item in task.items():
        message += f"\u2728 *{block}*: {item}\n"
    await update.message.reply_text(message, parse_mode="Markdown")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("done", done))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("plan", plan))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.job_queue.run_daily(send_daily_task, time=datetime.time(hour=8, tzinfo=TZ))
    app.job_queue.run_daily(penalty_reminder, time=datetime.time(hour=20, tzinfo=TZ))
    app.job_queue.run_daily(weekly_report, time=datetime.time(hour=21, minute=0, tzinfo=TZ), days=(6,))  # Sunday

    print("\u2705 Yurii Discipline Bot V3.3 –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
