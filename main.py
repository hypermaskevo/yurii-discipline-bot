# yurii_discipline_bot_v3.6.py
# ‚ûï /help, /done, /reset, /plan

import json, os, datetime, asyncio, random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
USER_ID = int(os.getenv("USER_ID"))

with open("yurii_discipline_plan_30days.json", "r", encoding="utf-8") as f:
    full_plan = json.load(f)

user_state = {"day": 1, "hellmode": False, "confirmed": False}
JOURNAL_FILE = "journal.json"
if os.path.exists(JOURNAL_FILE):
    with open(JOURNAL_FILE, "r", encoding="utf-8") as f:
        journal_data = json.load(f)
else:
    journal_data = {}

MOTIVATION_QUOTES = [
    "üî• –Ø–∫—â–æ –Ω–µ —Ç–∏ ‚Äî —Ç–æ —Ö—Ç–æ?",
    "üíÄ –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ –∞–±–æ —Å–º–µ—Ä—Ç—å —Ç–≤–æ—ó–º –º—Ä—ñ—è–º.",
    "üß† –ü–µ—Ä–µ–º–∞–≥–∞—î –Ω–µ —Å–∏–ª—å–Ω–∏–π, –∞ –≤–ø–µ—Ä—Ç–∏–π.",
    "üéØ –°–ª–∞–±–∫—ñ—Å—Ç—å –Ω–µ –¥–∞—Å—Ç—å —Ç–æ–±—ñ –º—ñ–ª—å–π–æ–Ω.",
    "üî™ –î—ñ–π —â–æ–¥–Ω—è ‚Äî –∞–±–æ –∑–Ω–æ–≤—É –±—É–¥–µ—à –±–µ–∑ –≥—Ä–æ—à–µ–π."
]

def save_journal():
    with open(JOURNAL_FILE, "w", encoding="utf-8") as f:
        json.dump(journal_data, f, indent=2, ensure_ascii=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    keyboard = [[InlineKeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–ª–∞–Ω", callback_data="show_plan")]]
    await update.message.reply_text("üëã –ì–æ—Ç–æ–≤–∏–π –¥–æ –ø—Ä–æ—Ä–∏–≤—É? –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –∞–±–æ /hellmode.", reply_markup=InlineKeyboardMarkup(keyboard))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    await update.message.reply_text(
        "/start ‚Äî –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞\n"
        "/done ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è\n"
        "/status ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç—É—Å\n"
        "/reset ‚Äî –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É –∑ –¥–Ω—è 1\n"
        "/plan –Ω–æ–º–µ—Ä ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –¥–µ–Ω—å\n"
        "/help ‚Äî —Ü—è –¥–æ–≤—ñ–¥–∫–∞"
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "show_plan":
        day = user_state["day"]
        tasks = full_plan.get(str(day), ["–ù–µ–º–∞—î –ø–ª–∞–Ω—É"])
        mode = "HELLMODE" if user_state["hellmode"] else "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º"
        await query.edit_message_text(f"üìÖ –î–µ–Ω—å {day} ({mode}):\n" + "\n".join(f"üîπ {t}" for t in tasks))
    elif query.data.startswith("journal_"):
        result = query.data.split("_")[1]
        today = datetime.date.today().isoformat()
        journal_data[today] = result
        save_journal()
        await query.edit_message_text(f"üìò –ó–≤—ñ—Ç –∑–∞ {today}: {result}\n{random.choice(MOTIVATION_QUOTES)}")

async def send_daily_task(context: ContextTypes.DEFAULT_TYPE):
    day = user_state["day"]
    tasks = full_plan.get(str(day), [])
    if user_state["hellmode"]:
        tasks += ["‚ö†Ô∏è –ü–æ–¥–≤—ñ–π–Ω–µ –≤—ñ–¥–µ–æ TikTok", "‚ö†Ô∏è 2x —Ñ–æ–∫—É—Å-—Å–µ—Å—ñ—ó"]
    msg = f"üåÖ –î–µ–Ω—å {day}. –ó–∞–≤–¥–∞–Ω–Ω—è:\n" + "\n".join(f"‚úÖ {t}" for t in tasks)
    msg += f"\n\n{random.choice(MOTIVATION_QUOTES)}"
    await context.bot.send_message(chat_id=USER_ID, text=msg)
    user_state["confirmed"] = False

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    if not user_state["confirmed"]:
        await context.bot.send_message(chat_id=USER_ID, text="üîî –¢–∏ —â–µ –Ω–µ –ø–æ—á–∞–≤ –¥–µ–Ω—å. –ù–µ –∑–ª–∏–π —Å–µ–±–µ.")

async def send_afternoon_check(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=USER_ID, text="‚è≥ –Ø–∫ –ø—Ä–æ—Å—É–≤–∞—î—Ç—å—Å—è –¥–µ–Ω—å?")

async def ask_for_journal(context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–≤", callback_data="journal_done")],
        [InlineKeyboardButton("‚ùå –ù–µ –≤–∏–∫–æ–Ω–∞–≤", callback_data="journal_fail")]
    ]
    await context.bot.send_message(chat_id=USER_ID, text="üìò –©–æ –∑ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–º –¥–Ω–µ–º?", reply_markup=InlineKeyboardMarkup(keyboard))

async def journal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    output = "\n".join(f"{date}: {entry}" for date, entry in sorted(journal_data.items())) or "–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤."
    await update.message.reply_text(f"üìä –ñ—É—Ä–Ω–∞–ª –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:\n{output}")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    day = user_state["day"]
    hell = "ON" if user_state["hellmode"] else "OFF"
    today = datetime.date.today().isoformat()
    result = journal_data.get(today, "‚ùì –©–µ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–≤")
    await update.message.reply_text(f"üìÖ –î–µ–Ω—å: {day}\nüî• Hellmode: {hell}\nüìò –ó–≤—ñ—Ç: {result}")

async def done_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    user_state["confirmed"] = True
    user_state["day"] += 1
    await update.message.reply_text("‚úÖ –î–µ–Ω—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –†—É—Ö–∞—î–º–æ—Å—å –¥–∞–ª—ñ.")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    user_state["day"] = 1
    user_state["hellmode"] = False
    await update.message.reply_text("üîÅ –°–∫–∏–Ω—É—Ç–æ –¥–æ –î–Ω—è 1.")

async def plan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –¥–Ω—è: /plan 1")
        return
    day = int(context.args[0])
    tasks = full_plan.get(str(day), ["–ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å"])
    await update.message.reply_text(f"üìÖ –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å {day}:\n" + "\n".join(f"üîπ {t}" for t in tasks))

async def hellmode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state["hellmode"] = True
    await update.message.reply_text("üí• Hellmode –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –ó–∞–≤—Ç—Ä–∞ ‚Äî –∂–æ—Ä—Å—Ç–∫–∏–π –¥–µ–Ω—å!")

async def weekly_summary(context: ContextTypes.DEFAULT_TYPE):
    past_7 = list(sorted(journal_data.items()))[-7:]
    total = len([1 for d in past_7 if "done" in d[1]])
    await context.bot.send_message(chat_id=USER_ID, text=f"üìä –ó–≤—ñ—Ç –∑–∞ —Ç–∏–∂–¥–µ–Ω—å:\n‚úÖ {total}/7 –≤–∏–∫–æ–Ω–∞–Ω–æ\n‚ùå {7 - total} –ø—Ä–æ–≥—É–ª—ñ–≤")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("journal", journal_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("done", done_command))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("plan", plan_command))
    app.add_handler(CommandHandler("hellmode", hellmode_command))
    app.add_handler(CallbackQueryHandler(button))

    job_queue = app.job_queue
    berlin_tz = datetime.timezone(datetime.timedelta(hours=2))
    job_queue.run_daily(send_daily_task, time=datetime.time(hour=8, tzinfo=berlin_tz))
    job_queue.run_daily(send_reminder, time=datetime.time(hour=12, tzinfo=berlin_tz))
    job_queue.run_daily(send_afternoon_check, time=datetime.time(hour=17, tzinfo=berlin_tz))
    job_queue.run_daily(ask_for_journal, time=datetime.time(hour=20, tzinfo=berlin_tz))
    job_queue.run_daily(weekly_summary, time=datetime.time(hour=20, tzinfo=berlin_tz), days=(6,))

    print("‚úÖ Yurii Discipline Bot V3.6 –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
